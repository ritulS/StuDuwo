# Front-End Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: site-deployment
spec:
  replicas: {{.Values.site.replicas}}
  selector:
    matchLabels:
      app: site
  template:
    metadata:
      labels:
        app: site
    spec:
      containers:
      - name: site
        image: {{.Values.site.image}}
        ports:
        - containerPort: {{.Values.site.containerPort}}
---
# Back-End Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: api-deployment
spec:
  replicas: {{.Values.api.replicas}}
  selector:
    matchLabels:
      app: api
  template:
    metadata:
      labels:
        app: api
    spec:
      serviceAccountName: wait-for-deps
      initContainers:
      - name: wait-for-deps
        image: bitnami/kubectl
        args:
          - rollout
          - status
          - --watch
          - --timeout=600s
          - statefulset/database-deployment
      - name: gen-cert
        image: registry.348575.xyz/studuwo/kubectl-envsubst:1.0.0 
        command:
          - /config/gen.sh
        env:
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: SVC_NAME
          value: {{.Values.api.service.name}}
        volumeMounts:
          - mountPath: /config
            name: gen-cert
          - mountPath: /gen-certs
            name: certs
      containers:
        - name: api
          image: {{.Values.api.image}}
          env:
          - name: POSTGRES_USER
            valueFrom:
              secretKeyRef:
                key: username
                name: postgres-secret
          - name: POSTGRES_PASSWORD
            valueFrom:
              secretKeyRef:
                key: password
                name: postgres-secret
          - name: URI
            value: {{.Values.database.service.name}}
          ports:
          - containerPort: {{.Values.api.containerPort}}
        - name: api-sidecar
          image: nginx
          volumeMounts:
            - mountPath: /gen-certs
              name: certs
            - mountPath: /etc/nginx/conf.d/
              name: nginx-conf
          ports:
          - containerPort: {{.Values.api.service.targetPort}}
      volumes:
        - name: certs
          emptyDir: {}
        - name: gen-cert
          configMap:
            name: gen-cert
            items:
              - key: gen.sh
                path: gen.sh
                mode: 0777
              - key: config.yaml
                path: config.yaml
        - name: nginx-conf
          configMap:
            name: nginx-sidecar
            items:
              - key: default.conf
                path: default.conf
---
# Seaweed proxy deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: seaweed-proxy-deployment
spec:
  replicas: {{.Values.sp.replicas}}
  selector:
    matchLabels:
      app: seaweed-proxy
  template:
    metadata:
      labels:
        app: seaweed-proxy
    spec:
      serviceAccountName: wait-for-deps
      initContainers:
      - name: wait-for-deps
        image: bitnami/kubectl
        args:
          - wait
          - job/wait-for-backend-deps
          - --for=condition=complete
          - --timeout=600s
      containers:
      - name: seaweed-proxy
        image: {{.Values.sp.image}}
        env:
        - name: AWS_ACCESS_KEY_ID
          valueFrom:
            secretKeyRef:
              key: accessKey
              name: seaweed-api-secret
        - name: AWS_SECRET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              key: secretKey
              name: seaweed-api-secret
        - name: AWS_REGION
          value: us-east-1
        - name: SEAWEEDFS_S3
          value: seaweedfs-s3
        ports:
        - containerPort: {{.Values.sp.containerPort}}
---
# postgres Deployment
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: database-deployment
spec:
  replicas: {{.Values.database.replicas}}
  selector:
    matchLabels:
      app: database
  template:
    metadata:
      labels:
        app: database
    spec:
      volumes:
      - name: postgres-pv-storage
        persistentVolumeClaim:
          claimName: postgres-pv-claim
      containers:
      - name: database
        image: {{.Values.database.image}}
        volumeMounts:
          - name: postgres-pv-storage
            mountPath: /data/db
        env:
          - name: POSTGRES_USER
            valueFrom:
              secretKeyRef:
                name: postgres-secret
                key: username
          - name: POSTGRES_PASSWORD
            valueFrom:
              secretKeyRef:
                name: postgres-secret
                key: password
        ports:
        - containerPort: {{.Values.database.containerPort}}
---
# PersistentVolume
apiVersion: v1
kind: PersistentVolume
metadata:
  name: postgres-pv-storage
spec:
  storageClassName: local-path
  persistentVolumeReclaimPolicy: Retain
  capacity:
    storage: {{.Values.database.persistentVolume.storage}}
  accessModes: 
    - ReadWriteMany
  hostPath:
    path: {{.Values.database.persistentVolume.hostPath}}
---
# PersistentVolumeClaim
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pv-claim
spec:
  accessModes:
    - {{.Values.database.accessModes}}
  resources:
    requests:
      storage: {{.Values.database.persistentVolumeClaim.storage}}
